# .github/workflows/deploy.yml
# Docker-free CI/CD pipeline for MCP server deployment to Fly.io

name: Build, Test, and Deploy (Docker-free)

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Lint with flake8
      run: |
        poetry run flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: poetry run black --check src/ tests/
    
    - name: Import sort check with isort
      run: poetry run isort --check-only src/ tests/
    
    - name: Type check with mypy
      run: poetry run mypy src/
    
    - name: Security scan with bandit
      run: poetry run bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run tests with pytest
      run: |
        poetry run pytest tests/ --tb=short --cov=src --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  validate-deployment-config:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate fly.toml
      run: |
        # Check if fly.toml exists and has required sections
        if [ ! -f "fly.toml" ]; then
          echo "‚ùå fly.toml not found"
          exit 1
        fi
        
        echo "‚úÖ fly.toml found"
        cat fly.toml
    
    - name: Validate Procfile
      run: |
        if [ ! -f "Procfile" ]; then
          echo "‚ùå Procfile not found"
          exit 1
        fi
        
        echo "‚úÖ Procfile found"
        cat Procfile
    
    - name: Validate runtime.txt
      run: |
        if [ ! -f "runtime.txt" ]; then
          echo "‚ùå runtime.txt not found"
          exit 1
        fi
        
        echo "‚úÖ runtime.txt found"
        cat runtime.txt

  deploy-staging:
    needs: [lint-and-test, security-scan, validate-deployment-config]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    environment:
      name: staging
      url: https://asf-staging.fly.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to staging
      run: |
        # Create staging-specific fly.toml if it doesn't exist
        if [ ! -f "fly.staging.toml" ]; then
          cp fly.toml fly.staging.toml
          sed -i 's/app = "autonomous-software-foundry"/app = "asf-staging"/' fly.staging.toml
        fi
        
        flyctl deploy --app asf-staging --config fly.staging.toml
    
    - name: Run health check
      run: |
        echo "‚è≥ Waiting for deployment to be ready..."
        sleep 30
        
        echo "üîç Checking health endpoint..."
        curl -f https://asf-staging.fly.dev/health
        
        echo "‚úÖ Staging deployment successful!"

  deploy-production:
    needs: [lint-and-test, security-scan, validate-deployment-config]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://autonomous-software-foundry.fly.dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to production
      run: |
        flyctl deploy --strategy rolling
    
    - name: Run post-deployment tests
      run: |
        echo "‚è≥ Waiting for deployment to be ready..."
        sleep 60
        
        echo "üîç Checking health endpoint..."
        curl -f https://autonomous-software-foundry.fly.dev/health
        
        echo "üîç Checking MCP capabilities..."
        # Note: This will need proper authentication in production
        curl -f https://autonomous-software-foundry.fly.dev/mcp/capabilities \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.MCP_TEST_TOKEN }}" || echo "MCP endpoint check skipped (needs auth)"
        
        echo "‚úÖ Production deployment successful!"

  smoke-tests:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Run comprehensive smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        
        # Test health endpoint
        response=$(curl -s https://autonomous-software-foundry.fly.dev/health)
        echo "Health response: $response"
        
        # Verify response contains expected fields
        if echo "$response" | grep -q '"status":"healthy"'; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi
        
        # Test response time
        response_time=$(curl -w "%{time_total}" -s -o /dev/null https://autonomous-software-foundry.fly.dev/health)
        echo "Response time: ${response_time}s"
        
        if (( $(echo "$response_time < 5.0" | bc -l) )); then
          echo "‚úÖ Response time acceptable"
        else
          echo "‚ö†Ô∏è Response time high: ${response_time}s"
        fi

  notify:
    needs: [deploy-staging, deploy-production, smoke-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: env.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,took
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}